merge_overlapping_times_full(cal)
cal = read.csv ("cal_to_merge.csv")
merge_overlapping_times_full <- function (df) {
df$start = ymd_hms (df$start)
df$end = ymd_hms (df$end)
df = df [order (df$start),]
df = df %>%
mutate(indx = c(0, cumsum(as.numeric(lead(start)) >
cummax(as.numeric(end)))[-n()])) %>%
group_by(indx) %>%
summarise(start = min(start), end = max(end))
return (as.data.frame (df[,c("start", "end")]))
}
merge_overlapping_times_full(cal)
ooos = merge_overlapping_times_full(cal)
minutes_to_add = 8 * 60
ooos$start <= task_start
task_start = dmy_hms ("03/05/2020 11:03:00")
ooos$start <= task_start
ooos$end >= task_start
(ooos$start <= task_start) + (ooos$end >= task_start)
(ooos$start <= task_start) & (ooos$end >= task_start)
if (sum ((ooos$start <= task_start) & (ooos$end >= task_start)) > 0){
print ("hello")
}
if (sum ((ooos$start <= task_start) & (ooos$end >= task_start)) > 0){
new_start = ooos$end
#print ("hello")
}
new_start
task_in_oos = (ooos$start <= task_start) & (ooos$end >= task_start)
task_in_oos = (ooos$start <= task_start) & (ooos$end >= task_start)
if (sum (task_in_oos) > 0{
new_start = max (ooos$end [task_in_oos])
#print ("hello")
}
task_in_oos = (ooos$start <= task_start) & (ooos$end >= task_start)
if (sum (task_in_oos) > 0){
new_start = max (ooos$end [task_in_oos])
#print ("hello")
}
new_start
new_end = new_start + minutes(minutes_to_add)
new_end
task_start = dmy_hms ("03/05/2020 11:03:00")
minutes_to_add = 10 * 60
task_end = task_start + minutes(minutes_to_add)
task_in_oos = (ooos$start <= task_start) & (ooos$end >= task_start)
if (sum (task_in_oos) > 0){
new_start = max (ooos$end [task_in_oos])
}
new_end = new_start + minutes(minutes_to_add)
new_end
adjust_end_times <- function (start_time, minutes_to_add, start_ooo, end_ooo){
curr_start_time = start_time
curr_end_time = curr_start_time + minutes (minutes_to_add)
#If the end time falls within an ooo, move it to be after the end of the ooo by
#the amount that it's currrently within it
if ((curr_end_time > start_ooo) & (curr_end_time < end_ooo)){
shinyjs::logjs ("end within ooo")
curr_end_time = end_ooo + minutes (curr_end_time - start_ooo)
}  else if ((curr_start_time <= start_ooo) & (curr_end_time >= end_ooo)){   #If the ooo falls within the task, add the ooo length to the current end time
shinyjs::logjs ("end fully within ooo")
#print ("fully within")
ooo_length = end_ooo - start_ooo
#diff_to_add = task_length - ((start_ooo - curr_start_time) + (curr_end_time - end_ooo))
diff_to_add = ooo_length - (start_ooo - curr_start_time)# + (curr_end_time - end_ooo))
#print (diff_to_add)
curr_end_time = curr_end_time + ooo_length #hours (diff_to_add)#ooo_length) #hours (diff_to_add)
}
return (list (curr_start_time, curr_end_time))
}
current_start_time = new_start
ooos = ooos [order (ooos$end),]
for (ooo_i in 1:nrow (ooos)){
adjusted_times = adjust_start_times (current_start_time, minutes_to_add, ooos$start [ooo_i], ooos$end [ooo_i])
#adjusted_times = adjust_end_times (current_start_time, minutes_to_add, ooo[1], ooo[2])
current_start_time= adjusted_times[[1]]
current_end_time= adjusted_times[[2]]
}
current_start_time = new_start
ooos = ooos [order (ooos$end),]
for (ooo_i in 1:nrow (ooos)){
adjusted_times = adjust_start_times (current_start_time, minutes_to_add, ooos$start [ooo_i], ooos$end [ooo_i])
#adjusted_times = adjust_end_times (current_start_time, minutes_to_add, ooo[1], ooo[2])
current_start_time= adjusted_times[[1]]
current_end_time= adjusted_times[[2]]
}
task_partially_in_oos = (new_end >= ooos$start) & ((new_end <= ooos$end))
sum (task_partially_in_oos)
difftime
difftime (curr_end_time, ooos$end [task_partially_in_oos], units = "mins")
curr_end_time = new_end
difftime (curr_end_time, ooos$end [task_partially_in_oos], units = "mins")
difftime (ooos$end [task_partially_in_oos], curr_end_time, units = "mins")
curr_end_time = ooos$end [task_partially_in_oos] + minutes (difftime (ooos$end [task_partially_in_oos], curr_end_time, units = "mins"))
curr_end_time
ooos$end
ooos$end [task_partially_in_oos]
difftime (ooos$end [task_partially_in_oos]
difftime (curr_end_time, ooos$start [task_partially_in_oos], units = "mins")
curr_end_time
library (lubridate)
library (dplyr)
cal = read.csv ("cal_to_merge.csv")
#cal$start = ymd_hms (cal$start)
#cal$end = ymd_hms (cal$end)
#cal = cal [order (cal$start),]
#df$start = ymd_hms (cal$start)
#df$end = ymd_hms (cal$end)
# merge_overlapping_times <- function (df) {
#   df$start = ymd_hms (df$start)
#   df$end = ymd_hms (df$end)
#
#   df = df [order (df$start),]
#
#   #df$start = as.character (df$start)
#   #df$end = as.character (df$end)
#   #write.csv (df, "cal_to_merge.csv")
#
#   df = df %>%
#     mutate(indx = c(0, cumsum(as.numeric(lead(start)) >
#                                 cummax(as.numeric(end)))[-n()]))# %>%
#     #group_by(indx)# %>%
#     #summarise(start = min(start), end = max(end))
#
#   return (as.data.frame (df[,c("start", "end")]))
# }
merge_overlapping_times_full <- function (df) {
df$start = ymd_hms (df$start)
df$end = ymd_hms (df$end)
df = df [order (df$start),]
df = df %>%
mutate(indx = c(0, cumsum(as.numeric(lead(start)) >
cummax(as.numeric(end)))[-n()])) %>%
group_by(indx) %>%
summarise(start = min(start), end = max(end))
return (as.data.frame (df[,c("start", "end")]))
}
ooos = merge_overlapping_times_full(cal)
task_start = dmy_hms ("03/05/2020 11:03:00")
minutes_to_add = 10 * 60
task_end = task_start + minutes(minutes_to_add)
task_in_oos = (ooos$start <= task_start) & (ooos$end >= task_start)
if (sum (task_in_oos) > 0){
new_start = max (ooos$end [task_in_oos])
}
new_end = new_start + minutes(minutes_to_add)
new_start
task_start = dmy_hms ("03/05/2020 11:03:00")
minutes_to_add = 10 * 60
task_end = task_start + minutes(minutes_to_add)
task_in_oos = (ooos$start <= task_start) & (ooos$end >= task_start)
if (sum (task_in_oos) > 0){
new_start = max (ooos$end [task_in_oos])
}
new_end = new_start + minutes(minutes_to_add)
new_end
new_start
task_partially_in_oos = (new_end >= ooos$start) & ((new_end <= ooos$end))
task_partially_in_oos
ooos [task_partially_in_oos),]
ooos [task_partially_in_oos,]
ooos$start [task_partially_in_oos]
curr_end_time
curr_end_time = new_end
curr_end_time
difftime (curr_end_time, ooos$start [task_partially_in_oos], units = "mins")
ooos$end [task_partially_in_oos] + minutes (difftime (curr_end_time, ooos$start [task_partially_in_oos], units = "mins"))
curr_end_time = ooos$end [task_partially_in_oos] + minutes (difftime (curr_end_time, ooos$start [task_partially_in_oos], units = "mins"))
oos_in_task = (curr_start_time <= ooos$start) & (curr_end_time >= ooos$end)
oos
oops
ooos
ymd_hms (ooos$end) - ymd_hms (ooos$start)
difftime (ymd_hms (ooos$end), ymd_hms (ooos$start), units = "mins")
ooos$length = difftime (ymd_hms (ooos$end), ymd_hms (ooos$start), units = "mins")
ooos$length
ooos.head()
head (ooos)
ooos$end - ooos$start
ooos$end[1] - ooos$start[2]
ooos$start[2] - ooos$end[1]
lag
ooos$start
head (ooos)
lag (ooos$start)
lag (ooos$end)
ooos$lag= lag (ooos$end)
head ( ooos)
difftime (ooos$start, lag (ooos$end), units = "mins")
ooos$free_time_lead = difftime (ooos$start, lag (ooos$end), units = "mins")
ooos
new_start
oos$start > new_start
ooos$start > new_start
which (ooos$start > new_start)
min (which (ooos$start > new_start))
entrypoint = min (which (ooos$start > new_start))
next_ooos = min (which (ooos$start > new_start))
ooos$start [next_ooos]
new_start - ooos$start [next_ooos]
difftime (ooos$start [next_ooos], new_start, units = "mins")
free_time_to_next_task = difftime (ooos$start [next_ooos], new_start, units = "mins")
ooos
ooos$free_time_lead [(next_ooos+1):length (ooos$free_time_lead)]
cumsum (ooos$free_time_lead [(next_ooos+1):length (ooos$free_time_lead)])
ooos$free_time_lead [(next_ooos+1):length (ooos$free_time_lead)]
as.numeric (ooos$free_time_lead [(next_ooos+1):length (ooos$free_time_lead)])
cumsum (as.numeric (ooos$free_time_lead [(next_ooos+1):length (ooos$free_time_lead)]))
cumsum (as.numeric (ooos$free_time_lead [(next_ooos+1):length (ooos$free_time_lead)])) + next_ooos
minutes_to_add
total_free_time = cumsum (as.numeric (ooos$free_time_lead [(next_ooos+1):length (ooos$free_time_lead)])) + next_ooos
total_free_time <= minutes_to_add
max (which (total_free_time <= minutes_to_add))
last_ooos_idx = max (which (total_free_time <= minutes_to_add))
next_ooos = min (which (ooos$start > new_start))
total_free_time = cumsum (as.numeric (ooos$free_time_lead [(next_ooos+1):length (ooos$free_time_lead)])) + next_ooos
last_ooos_idx = max (which (total_free_time <= minutes_to_add))
system.time (next_ooos = min (which (ooos$start > new_start))
total_free_time = cumsum (as.numeric (ooos$free_time_lead [(next_ooos+1):length (ooos$free_time_lead)])) + next_ooos
last_ooos_idx = max (which (total_free_time <= minutes_to_add)))
system.time ({next_ooos = min (which (ooos$start > new_start))
total_free_time = cumsum (as.numeric (ooos$free_time_lead [(next_ooos+1):length (ooos$free_time_lead)])) + next_ooos
last_ooos_idx = max (which (total_free_time <= minutes_to_add))})
system.time ({next_ooos = min (which (ooos$start > new_start))
total_free_time = cumsum (as.numeric (ooos$free_time_lead [(next_ooos+1):length (ooos$free_time_lead)])) + next_ooos
last_ooos_idx = max (which (total_free_time <= minutes_to_add))})
a <- function (){
next_ooos = min (which (ooos$start > new_start))
total_free_time = cumsum (as.numeric (ooos$free_time_lead [(next_ooos+1):length (ooos$free_time_lead)])) + next_ooos
last_ooos_idx = max (which (total_free_time <= minutes_to_add))
}
system.time (a)
system.time (a)
a <- function (){
for (i in 1:100){
next_ooos = min (which (ooos$start > new_start))
total_free_time = cumsum (as.numeric (ooos$free_time_lead [(next_ooos+1):length (ooos$free_time_lead)])) + next_ooos
last_ooos_idx = max (which (total_free_time <= minutes_to_add))
}
}
system.time (a)
a <- function (){
for (i in 1:1000){
next_ooos = min (which (ooos$start > new_start))
total_free_time = cumsum (as.numeric (ooos$free_time_lead [(next_ooos+1):length (ooos$free_time_lead)])) + next_ooos
last_ooos_idx = max (which (total_free_time <= minutes_to_add))
}
}
system.time (a)
a <- function (){
for (i in 1:100000){
next_ooos = min (which (ooos$start > new_start))
total_free_time = cumsum (as.numeric (ooos$free_time_lead [(next_ooos+1):length (ooos$free_time_lead)])) + next_ooos
last_ooos_idx = max (which (total_free_time <= minutes_to_add))
}
}
system.time (a)
a <- function (){
for (i in 1:100000){
next_ooos = min (which (ooos$start > new_start))
total_free_time = cumsum (as.numeric (ooos$free_time_lead [(next_ooos+1):length (ooos$free_time_lead)])) + next_ooos
last_ooos_idx = max (which (total_free_time <= minutes_to_add))
}
}
system.time (a)
a <- function (){
for (i in 1:1000000000){
next_ooos = min (which (ooos$start > new_start))
total_free_time = cumsum (as.numeric (ooos$free_time_lead [(next_ooos+1):length (ooos$free_time_lead)])) + next_ooos
last_ooos_idx = max (which (total_free_time <= minutes_to_add))
}
}
system.time (a)
a <- function (){
for (i in 1:1000000000){
next_ooos = min (which (ooos$start > new_start))
total_free_time = cumsum (as.numeric (ooos$free_time_lead [(next_ooos+1):length (ooos$free_time_lead)])) + next_ooos
last_ooos_idx = max (which (total_free_time <= minutes_to_add))
}
}
system.time (a)
a <- function (){
for (i in 1:100){
next_ooos = min (which (ooos$start > new_start))
total_free_time = cumsum (as.numeric (ooos$free_time_lead [(next_ooos+1):length (ooos$free_time_lead)])) + next_ooos
last_ooos_idx = max (which (total_free_time <= minutes_to_add))
}
}
system.time (a())
a <- function (){
for (i in 1:1000){
next_ooos = min (which (ooos$start > new_start))
total_free_time = cumsum (as.numeric (ooos$free_time_lead [(next_ooos+1):length (ooos$free_time_lead)])) + next_ooos
last_ooos_idx = max (which (total_free_time <= minutes_to_add))
}
}
system.time (a())
a <- function (){
for (i in 1:10000){
next_ooos = min (which (ooos$start > new_start))
total_free_time = cumsum (as.numeric (ooos$free_time_lead [(next_ooos+1):length (ooos$free_time_lead)])) + next_ooos
last_ooos_idx = max (which (total_free_time <= minutes_to_add))
}
}
system.time (a())
ooos$free_time_lead = as.numeric (ooos$free_time_lead)
ooos$free_time_lead
cumsum (ooos$free_time_lead)
ooos$free_time_lead
is.na (ooos$free_time_lead)
ooos$free_time_lead [is.na (ooos$free_time_lead)]
ooos$free_time_lead [is.na (ooos$free_time_lead)] = 0
cumsum (ooos$free_time_lead)
ooos$cum_free_time_lead = cumsum (ooos$free_time_lead)
next_ooos = min (which (ooos$start > new_start))
ooos$cum_free_time_lead [next_ooos]
ooos$cum_free_time_lead - ooos$cum_free_time_lead [next_ooos]
ooos$cum_free_time_lead - ooos$cum_free_time_lead [next_ooos]
total_free_time = ooos$cum_free_time_lead - ooos$cum_free_time_lead [next_ooos]
total_free_time
total_free_time <= (minutes_to_add - free_time_to_next_task)
min (which (total_free_time <= (minutes_to_add - free_time_to_next_task)))
max (which (total_free_time <= (minutes_to_add - free_time_to_next_task)))
ooos$end
ooos$end[last_ooos_idx]
total_free_time [last_ooos_idx]
last_ooos_idx
(minutes_to_add - free_time_to_next_task)
minutes_to_add
free_time_to_next_task
total_free_time
which (total_free_time <= (minutes_to_add - free_time_to_next_task))
free_time_to_next_task [which (total_free_time <= (minutes_to_add - free_time_to_next_task))]
total_free_time [which (total_free_time <= (minutes_to_add - free_time_to_next_task))]
last_ooos_idx
total_free_time [which (total_free_time <= (minutes_to_add - free_time_to_next_task))]
which (total_free_time <= (minutes_to_add - free_time_to_next_task))
max (which (total_free_time <= (minutes_to_add - free_time_to_next_task)))
last_ooos_idx = max (which (total_free_time <= (minutes_to_add - free_time_to_next_task)))
total_free_time [last_ooos_idx]
ooos$end[last_ooos_idx]
total_free_time [last_ooos_idx]
(minutes_to_add - free_time_to_next_task)
total_free_time
as.numeric(minutes_to_add - free_time_to_next_task)
total_free_time [last_ooos_idx] - as.numeric(minutes_to_add - free_time_to_next_task)
as.numeric(minutes_to_add - free_time_to_next_task) - total_free_time [last_ooos_idx]
time_to_add = as.numeric(minutes_to_add - free_time_to_next_task) - total_free_time [last_ooos_idx]
ooos$end[last_ooos_idx] + minutes (time_to_add)
new_end = new_start + minutes(minutes_to_add)
new_end
a <- function (){
for (i in 1:10000){
next_ooos = min (which (ooos$start > new_start))
total_free_time = ooos$cum_free_time_lead - ooos$cum_free_time_lead [next_ooos]
free_time_to_next_task = difftime (ooos$start [next_ooos], new_start, units = "mins")
last_ooos_idx = max (which (total_free_time <= (minutes_to_add - free_time_to_next_task))) #max (which (total_free_time <= (minutes_to_add - free_time_to_next_task)))
time_to_add = as.numeric(minutes_to_add - free_time_to_next_task) - total_free_time [last_ooos_idx]
ooos$end[last_ooos_idx] + minutes (time_to_add)
}
}
system.time (a())
a <- function (){
for (i in 1:100){
next_ooos = min (which (ooos$start > new_start))
total_free_time = ooos$cum_free_time_lead - ooos$cum_free_time_lead [next_ooos]
free_time_to_next_task = difftime (ooos$start [next_ooos], new_start, units = "mins")
last_ooos_idx = max (which (total_free_time <= (minutes_to_add - free_time_to_next_task))) #max (which (total_free_time <= (minutes_to_add - free_time_to_next_task)))
time_to_add = as.numeric(minutes_to_add - free_time_to_next_task) - total_free_time [last_ooos_idx]
ooos$end[last_ooos_idx] + minutes (time_to_add)
}
}
system.time (a())
a <- function (){
for (i in 1:1000){
next_ooos = min (which (ooos$start > new_start))
total_free_time = ooos$cum_free_time_lead - ooos$cum_free_time_lead [next_ooos]
free_time_to_next_task = difftime (ooos$start [next_ooos], new_start, units = "mins")
last_ooos_idx = max (which (total_free_time <= (minutes_to_add - free_time_to_next_task))) #max (which (total_free_time <= (minutes_to_add - free_time_to_next_task)))
time_to_add = as.numeric(minutes_to_add - free_time_to_next_task) - total_free_time [last_ooos_idx]
ooos$end[last_ooos_idx] + minutes (time_to_add)
}
}
system.time (a())
a <- function (){
for (i in 1:1000){
next_ooos = min (which (ooos$start > new_start))
total_free_time = ooos$cum_free_time_lead - ooos$cum_free_time_lead [next_ooos]
free_time_to_next_task = difftime (ooos$start [next_ooos], new_start, units = "mins")
last_ooos_idx = max (which (total_free_time <= (minutes_to_add - free_time_to_next_task))) #max (which (total_free_time <= (minutes_to_add - free_time_to_next_task)))
# time_to_add = as.numeric(minutes_to_add - free_time_to_next_task) - total_free_time [last_ooos_idx]
#  ooos$end[last_ooos_idx] + minutes (time_to_add)
}
}
system.time (a())
a <- function (){
for (i in 1:1000){
next_ooos = min (which (ooos$start > new_start))
total_free_time = ooos$cum_free_time_lead - ooos$cum_free_time_lead [next_ooos]
free_time_to_next_task = difftime (ooos$start [next_ooos], new_start, units = "mins")
last_ooos_idx = max (which (total_free_time <= (minutes_to_add - free_time_to_next_task))) #max (which (total_free_time <= (minutes_to_add - free_time_to_next_task)))
# time_to_add = as.numeric(minutes_to_add - free_time_to_next_task) - total_free_time [last_ooos_idx]
ooos$end[last_ooos_idx] + minutes (time_to_add)
}
}
system.time (a())
a <- function (){
for (i in 1:1000){
next_ooos = min (which (ooos$start > new_start))
total_free_time = ooos$cum_free_time_lead - ooos$cum_free_time_lead [next_ooos]
free_time_to_next_task = difftime (ooos$start [next_ooos], new_start, units = "mins")
last_ooos_idx = max (which (total_free_time <= (minutes_to_add - free_time_to_next_task))) #max (which (total_free_time <= (minutes_to_add - free_time_to_next_task)))
time_to_add = as.numeric(minutes_to_add - free_time_to_next_task) - total_free_time [last_ooos_idx]
# ooos$end[last_ooos_idx] + minutes (time_to_add)
}
}
system.time (a())
task_start = dmy_hms ("03/05/2020 11:03:00")
minutes_to_add = 5 * 60
task_end = task_start + minutes(minutes_to_add)
#Set up ooos - precalc
ooos$free_time_lead = as.numeric (ooos$free_time_lead)
ooos$free_time_lead [is.na (ooos$free_time_lead)] = 0
ooos$cum_free_time_lead = cumsum (ooos$free_time_lead)
#Move start time
task_in_oos = (ooos$start <= task_start) & (ooos$end >= task_start)
if (sum (task_in_oos) > 0){
new_start = max (ooos$end [task_in_oos])
}
new_end = new_start + minutes(minutes_to_add)
#Get new end time
next_ooos = min (which (ooos$start > new_start))
total_free_time = ooos$cum_free_time_lead - ooos$cum_free_time_lead [next_ooos]
free_time_to_next_task = difftime (ooos$start [next_ooos], new_start, units = "mins")
last_ooos_idx = max (which (total_free_time <= (minutes_to_add - free_time_to_next_task))) #max (which (total_free_time <= (minutes_to_add - free_time_to_next_task)))
time_to_add = as.numeric(minutes_to_add - free_time_to_next_task) - total_free_time [last_ooos_idx]
new_end = ooos$end[last_ooos_idx] + minutes (time_to_add)
new_start
print (c(new_start, new_end))
task_start = dmy_hms ("03/05/2020 11:03:00")
minutes_to_add = 5 * 60
task_end = task_start + minutes(minutes_to_add)
#Set up ooos - precalc
ooos$free_time_lead = as.numeric (ooos$free_time_lead)
ooos$free_time_lead [is.na (ooos$free_time_lead)] = 0
ooos$cum_free_time_lead = cumsum (ooos$free_time_lead)
#Move start time
task_in_oos = (ooos$start <= task_start) & (ooos$end >= task_start)
if (sum (task_in_oos) > 0){
new_start = max (ooos$end [task_in_oos])
}
#new_end = new_start + minutes(minutes_to_add)
#Get new end time
next_ooos = min (which (ooos$start > new_start))
total_free_time = ooos$cum_free_time_lead - ooos$cum_free_time_lead [next_ooos]
free_time_to_next_task = difftime (ooos$start [next_ooos], new_start, units = "mins")
last_ooos_idx = max (which (total_free_time <= (minutes_to_add - free_time_to_next_task))) #max (which (total_free_time <= (minutes_to_add - free_time_to_next_task)))
time_to_add = as.numeric(minutes_to_add - free_time_to_next_task) - total_free_time [last_ooos_idx]
new_end = ooos$end[last_ooos_idx] + minutes (time_to_add)
print (c(new_start, new_end))
minutes_to_add
task_end
task_start
task_start = dmy_hms ("03/05/2020 11:03:00")
minutes_to_add = 5 * 60
task_end = task_start + minutes(minutes_to_add)
#Set up ooos - precalc
ooos$free_time_lead = as.numeric (ooos$free_time_lead)
ooos$free_time_lead [is.na (ooos$free_time_lead)] = 0
ooos$cum_free_time_lead = cumsum (ooos$free_time_lead)
#Move start time
task_in_oos = (ooos$start <= task_start) & (ooos$end >= task_start)
if (sum (task_in_oos) > 0){
new_start = max (ooos$end [task_in_oos])
}
new_start
next_ooos = min (which (ooos$start > new_start))
next_ooos
ooos$cum_free_time_lead [next_ooos]
ooos$cum_free_time_lead
total_free_time
ooos[next_ooos]
ooos[next_ooos,]
ooos [14:20,]
new_start
ooos [15:20,]
free_time_to_next_task
free_time_to_next_task / 60
free_time_to_next_task / 60
ooos [16:20,]
last_ooos_idx
time_to_add
print (c(new_start, new_end))
as.character (ymd_hm ("2020/05/18 10:00", tx = Sys.timezone()))
library (lubridate)
as.character (ymd_hm ("2020/05/18 10:00", tx = Sys.timezone()))
as.character (ymd_hm ("2020/05/18 10:00", tz = Sys.timezone()))
as.character (with_tz (ymd_hm ("2020/05/18 10:00", tz = Sys.timezone())))
dl = with_tz (ymd_hm ("2020/05/18 10:00", tz = Sys.timezone()))
print(dl)
dl = with_tz (ymd_hm ("2020/05/18 10:00", tz = Sys.timezone()), tzone = "UTC")
print(dl)
ymd_hm ("2020/05/18 10:00", tz = Sys.timezone())
with_tz (ymd_hm ("2020/05/18 10:00", tz = Sys.timezone()), tzone = "England/London")
with_tz (ymd_hm ("2020/05/18 10:00", tz = Sys.timezone()), tzone = "BST")
dl = with_tz (ymd_hm ("2020/05/18 10:00", tz = Sys.timezone()), tzone = "Europe/London")
print(dl)
force_tz (ymd_hm ("2020/05/18 10:00", tz = Sys.timezone()), tzone = "Europe/London")
dl = force_tz (ymd_hm ("2020/05/18 10:00", tz = Sys.timezone()), tzone = "Europe/London")
print(dl)
